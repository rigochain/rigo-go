// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: secret_feeder.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecretFeederSvc_Handshake_FullMethodName    = "/server.SecretFeederSvc/Handshake"
	SecretFeederSvc_NewSecret_FullMethodName    = "/server.SecretFeederSvc/NewSecret"
	SecretFeederSvc_GetSecret_FullMethodName    = "/server.SecretFeederSvc/GetSecret"
	SecretFeederSvc_UpdateSecret_FullMethodName = "/server.SecretFeederSvc/UpdateSecret"
)

// SecretFeederSvcClient is the client API for SecretFeederSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretFeederSvcClient interface {
	Handshake(ctx context.Context, in *ReqHandshake, opts ...grpc.CallOption) (*RespHandshake, error)
	NewSecret(ctx context.Context, in *ReqNewSecret, opts ...grpc.CallOption) (*RespNewSecret, error)
	GetSecret(ctx context.Context, in *ReqGetSecret, opts ...grpc.CallOption) (*RespGetSecret, error)
	UpdateSecret(ctx context.Context, in *ReqUpdateSecret, opts ...grpc.CallOption) (*RespUpdateSecret, error)
}

type secretFeederSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretFeederSvcClient(cc grpc.ClientConnInterface) SecretFeederSvcClient {
	return &secretFeederSvcClient{cc}
}

func (c *secretFeederSvcClient) Handshake(ctx context.Context, in *ReqHandshake, opts ...grpc.CallOption) (*RespHandshake, error) {
	out := new(RespHandshake)
	err := c.cc.Invoke(ctx, SecretFeederSvc_Handshake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretFeederSvcClient) NewSecret(ctx context.Context, in *ReqNewSecret, opts ...grpc.CallOption) (*RespNewSecret, error) {
	out := new(RespNewSecret)
	err := c.cc.Invoke(ctx, SecretFeederSvc_NewSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretFeederSvcClient) GetSecret(ctx context.Context, in *ReqGetSecret, opts ...grpc.CallOption) (*RespGetSecret, error) {
	out := new(RespGetSecret)
	err := c.cc.Invoke(ctx, SecretFeederSvc_GetSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretFeederSvcClient) UpdateSecret(ctx context.Context, in *ReqUpdateSecret, opts ...grpc.CallOption) (*RespUpdateSecret, error) {
	out := new(RespUpdateSecret)
	err := c.cc.Invoke(ctx, SecretFeederSvc_UpdateSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretFeederSvcServer is the server API for SecretFeederSvc service.
// All implementations must embed UnimplementedSecretFeederSvcServer
// for forward compatibility
type SecretFeederSvcServer interface {
	Handshake(context.Context, *ReqHandshake) (*RespHandshake, error)
	NewSecret(context.Context, *ReqNewSecret) (*RespNewSecret, error)
	GetSecret(context.Context, *ReqGetSecret) (*RespGetSecret, error)
	UpdateSecret(context.Context, *ReqUpdateSecret) (*RespUpdateSecret, error)
	mustEmbedUnimplementedSecretFeederSvcServer()
}

// UnimplementedSecretFeederSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSecretFeederSvcServer struct {
}

func (UnimplementedSecretFeederSvcServer) Handshake(context.Context, *ReqHandshake) (*RespHandshake, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedSecretFeederSvcServer) NewSecret(context.Context, *ReqNewSecret) (*RespNewSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSecret not implemented")
}
func (UnimplementedSecretFeederSvcServer) GetSecret(context.Context, *ReqGetSecret) (*RespGetSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedSecretFeederSvcServer) UpdateSecret(context.Context, *ReqUpdateSecret) (*RespUpdateSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (UnimplementedSecretFeederSvcServer) mustEmbedUnimplementedSecretFeederSvcServer() {}

// UnsafeSecretFeederSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretFeederSvcServer will
// result in compilation errors.
type UnsafeSecretFeederSvcServer interface {
	mustEmbedUnimplementedSecretFeederSvcServer()
}

func RegisterSecretFeederSvcServer(s grpc.ServiceRegistrar, srv SecretFeederSvcServer) {
	s.RegisterService(&SecretFeederSvc_ServiceDesc, srv)
}

func _SecretFeederSvc_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHandshake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretFeederSvcServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretFeederSvc_Handshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretFeederSvcServer).Handshake(ctx, req.(*ReqHandshake))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretFeederSvc_NewSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNewSecret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretFeederSvcServer).NewSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretFeederSvc_NewSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretFeederSvcServer).NewSecret(ctx, req.(*ReqNewSecret))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretFeederSvc_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetSecret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretFeederSvcServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretFeederSvc_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretFeederSvcServer).GetSecret(ctx, req.(*ReqGetSecret))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretFeederSvc_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateSecret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretFeederSvcServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretFeederSvc_UpdateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretFeederSvcServer).UpdateSecret(ctx, req.(*ReqUpdateSecret))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretFeederSvc_ServiceDesc is the grpc.ServiceDesc for SecretFeederSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretFeederSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.SecretFeederSvc",
	HandlerType: (*SecretFeederSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _SecretFeederSvc_Handshake_Handler,
		},
		{
			MethodName: "NewSecret",
			Handler:    _SecretFeederSvc_NewSecret_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _SecretFeederSvc_GetSecret_Handler,
		},
		{
			MethodName: "UpdateSecret",
			Handler:    _SecretFeederSvc_UpdateSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret_feeder.proto",
}
